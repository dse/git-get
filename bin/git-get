#!/usr/bin/env perl
use warnings;
use strict;

my $GITGET_HOME = $ENV{GITGET_HOME} // "$ENV{HOME}/git";

my $PKGS = {
    'tdu' => {
        'repos' => 'git@github.com:dse/tdu.git',
    },
    'vtclock' => {
        'repos' => 'git@github.com:dse/vtclock.git',
    },
    'apt-cyg' => {
        'repos' => 'git@github.com:transcode-open/apt-cyg.git',
    },
    'daterange' => {
        'repos' => 'git@github.com:dse/daterange.git',
    },
    'git-get' => {
        'repos' => 'git@github.com:dse/git-get.git',
    },
};

my ($cmd, @args) = @ARGV;

if (!defined $cmd || !$cmd) {
    die("git-get: No command specified\n");
} elsif ($cmd eq "install") {
    install(@args);
} elsif ($cmd eq "listall") {
    my @pkgs = sort keys %$PKGS;
    print("$_\n") foreach @pkgs;
} else {
    die("git-get: No such command: $cmd\n");
}

sub install {
    my (@pkgs) = @_;
    foreach my $pkg (@pkgs) {
        my $PKG = $PKGS->{$pkg};
        if (!$PKG) {
            warn("git-get: No such package: $pkg\n");
            next;
        }
        print("chdir $GITGET_HOME\n");
        chdir($GITGET_HOME) or die("git-get: chdir $GITGET_HOME failed.\n");
        if (!-d $pkg) {
            system("git", "clone", $PKG->{repos}, "$pkg") and die("git-get: git clone $PKG->{repos} $pkg failed.\n");
            print("chdir $pkg\n");
            chdir($pkg) or die("git-get: chdir $pkg failed.\n");
        } else {
            print("chdir $pkg\n");
            chdir($pkg) or die("git-get: chdir $pkg failed.\n");
            system("git", "pull", "--rebase", "origin", "master") and die("git-get: git pull --rebase failed.\n");
        }
        if (-x "/usr/bin/cygcheck") {
            system("make", "install") and die("git-get: make install failed.\n");
        } else {
            system("sudo", "make", "install") and die("git-get: make install failed.\n");
        }
          
    }
}

